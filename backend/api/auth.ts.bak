// backend/api/auth.ts
import { v4 as uuidv4 } from 'uuid';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import mariadb from 'mariadb';
import dotenv from 'dotenv';

dotenv.config();

const pool = mariadb.createPool({
    host: process.env.DB_HOST,
    port: Number(process.env.DB_PORT),
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
    connectionLimit: 5
});

// JWT secret key
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';
// Token expiration (1 day)
const TOKEN_EXPIRATION = '1d';

// Password validation
const isStrongPassword = (password: string): boolean => {
    // At least 8 characters
    if (password.length < 8) return false;
    
    // Check for uppercase, lowercase, number, and special character
    const hasUppercase = /[A-Z]/.test(password);
    const hasLowercase = /[a-z]/.test(password);
    const hasNumber = /[0-9]/.test(password);
    const hasSpecial = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password);
    
    return hasUppercase && hasLowercase && hasNumber && hasSpecial;
};

// User registration
export async function register(userData: { username: string; email: string; password: string }) {
    let conn;
    try {
        // Validate password strength
        if (!isStrongPassword(userData.password)) {
            throw new Error('Password must be at least 8 characters and include uppercase, lowercase, number, and special character');
        }
        
        conn = await pool.getConnection();
        
        // Check if username or email already exists
        const [existingUser] = await conn.query(
            "SELECT * FROM users WHERE username = ? OR email = ?",
            [userData.username, userData.email]
        );
        
        if (existingUser) {
            throw new Error('Username or email already exists');
        }
        
        // Hash the password
        const saltRounds = 10;
        const hashedPassword = await bcrypt.hash(userData.password, saltRounds);
        
        // Create new user
        const id = uuidv4();
        await conn.query(
            "INSERT INTO users (id, username, email, password_hash, role) VALUES (?, ?, ?, ?, ?)",
            [id, userData.username, userData.email, hashedPassword, 'user']
        );
        
        // Get the created user (without password)
        const [newUser] = await conn.query(
            "SELECT id, username, email, role, created_at, updated_at FROM users WHERE id = ?",
            [id]
        );
        
        return newUser;
    } catch (error) {
        console.error("Error registering user:", error);
        throw error;
    } finally {
        if (conn) conn.end();
    }
}

// User login
export async function login(credentials: { username: string; password: string }) {
    let conn;
    try {
        conn = await pool.getConnection();
        
        // Find user by username
        const [user] = await conn.query(
            "SELECT * FROM users WHERE username = ?",
            [credentials.username]
        );
        
        if (!user) {
            throw new Error('Invalid username or password');
        }
        
        // Compare passwords
        const passwordMatch = await bcrypt.compare(credentials.password, user.password_hash);
        
        if (!passwordMatch) {
            throw new Error('Invalid username or password');
        }
        
        // Generate JWT token
        const token = jwt.sign(
            { 
                id: user.id,
                username: user.username,
                email: user.email,
                role: user.role
            },
            JWT_SECRET,
            { expiresIn: TOKEN_EXPIRATION }
        );
        
        // Return user info and token (without password)
        const { password_hash, ...userWithoutPassword } = user;
        
        return {
            user: userWithoutPassword,
            token
        };
    } catch (error) {
        console.error("Error logging in:", error);
        throw error;
    } finally {
        if (conn) conn.end();
    }
}

// Get current user from token
export async function getCurrentUser(userId: string) {
    let conn;
    try {
        conn = await pool.getConnection();
        
        // Find user by ID
        const [user] = await conn.query(
            "SELECT id, username, email, role, created_at, updated_at FROM users WHERE id = ?",
            [userId]
        );
        
        if (!user) {
            throw new Error('User not found');
        }
        
        return user;
    } catch (error) {
        console.error("Error getting current user:", error);
        throw error;
    } finally {
        if (conn) conn.end();
    }
}

// Middleware to verify JWT token
export function verifyToken(token: string) {
    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        return decoded;
    } catch (error) {
        throw new Error('Invalid token');
    }
}
