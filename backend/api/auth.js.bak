// JavaScript version of auth.ts
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const { v4: uuidv4 } = require('uuid');
const mariadb = require('mariadb');
const dotenv = require('dotenv');

dotenv.config();

// Create a connection pool
const pool = mariadb.createPool({
  host: process.env.DB_HOST,
  port: Number(process.env.DB_PORT),
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  connectionLimit: 5
});

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

// Register a new user
const register = async (userData) => {
  const { username, email, password } = userData;
  let conn;
  
  try {
    conn = await pool.getConnection();
    
    // Check if username or email already exists
    const [existingUser] = await conn.query(
      "SELECT * FROM users WHERE username = ? OR email = ?",
      [username, email]
    );
    
    if (existingUser) {
      throw new Error('Username or email already exists');
    }
    
    // Hash the password
    const salt = await bcrypt.genSalt(10);
    const password_hash = await bcrypt.hash(password, salt);
    
    // Create a new user
    const id = uuidv4();
    const now = new Date().toISOString().slice(0, 19).replace('T', ' ');
    
    await conn.query(
      "INSERT INTO users (id, username, email, password_hash, role, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?)",
      [id, username, email, password_hash, 'user', now, now]
    );
    
    // Return user without password
    const [newUser] = await conn.query(
      "SELECT id, username, email, role, created_at, updated_at FROM users WHERE id = ?",
      [id]
    );
    
    return newUser;
  } catch (error) {
    console.error("Error registering user:", error);
    throw error;
  } finally {
    if (conn) conn.release();
  }
};

// Login a user
const login = async (credentials) => {
  const { username, password } = credentials;
  let conn;
  
  try {
    conn = await pool.getConnection();
    
    // Find user by username
    const [user] = await conn.query(
      "SELECT * FROM users WHERE username = ?",
      [username]
    );
    
    if (!user) {
      throw new Error('Invalid username or password');
    }
    
    // Check password
    const isMatch = await bcrypt.compare(password, user.password_hash);
    if (!isMatch) {
      throw new Error('Invalid username or password');
    }
    
    // Generate JWT token
    const token = jwt.sign(
      { id: user.id, username: user.username },
      JWT_SECRET,
      { expiresIn: '1d' }
    );
    
    // Return user and token (without password)
    const { password_hash, ...userWithoutPassword } = user;
    return {
      user: userWithoutPassword,
      token
    };
  } catch (error) {
    console.error("Error logging in:", error);
    throw error;
  } finally {
    if (conn) conn.release();
  }
};

// Get current user
const getCurrentUser = async (userId) => {
  let conn;
  
  try {
    conn = await pool.getConnection();
    
    // Find user by ID
    const [user] = await conn.query(
      "SELECT id, username, email, role, created_at, updated_at FROM users WHERE id = ?",
      [userId]
    );
    
    if (!user) {
      throw new Error('User not found');
    }
    
    return user;
  } catch (error) {
    console.error("Error getting current user:", error);
    throw error;
  } finally {
    if (conn) conn.release();
  }
};

// Verify JWT token
const verifyToken = (token) => {
  try {
    return jwt.verify(token, JWT_SECRET);
  } catch (error) {
    throw new Error('Invalid token');
  }
};

module.exports = {
  register,
  login,
  getCurrentUser,
  verifyToken
};
